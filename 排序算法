Leetcode912 https://leetcode-cn.com/problems/sort-an-array/
快速排序
class Solution {
public:
    int partition(vector<int>& nums,int left,int right)
    {
        int pivot=nums[left];
        int i=left-1;
        int j=left;
        for(;j<=right;j++)
        {
            if(nums[j]<=pivot)
            {
                swap(nums[++i],nums[j]);
            }
        }
        swap(nums[i],nums[left]);
        return i;
    }
    void quickSort(vector<int>& nums,int left,int right)
    {
        if(left<right)
        {
            int pos=partition(nums,left,right);
            quickSort(nums,left,pos-1);
            quickSort(nums,pos+1,right);
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        quickSort(nums,0,nums.size()-1);
        return nums;
    }
};

归并排序
class Solution {
public:
    void merge(vector<int>& nums,int left,int mid,int right)
    {
        vector<int> tmp;
        int i=left,j=mid+1;
        while(i<=mid&&j<=right)
        {
            if(nums[i]<nums[j])
            {
                tmp.push_back(nums[i]);
                i++;
            }
            else
            {
                tmp.push_back(nums[j]);
                j++;
            }
        }
        while(i<=mid)
        {
            tmp.push_back(nums[i]);
            i++;
        }
        while(j<=right)
        {
            tmp.push_back(nums[j]);
            j++;
        }
        for(int i=0;i<tmp.size();i++)
        {
            nums[left+i]=tmp[i];
        }
    }
    void mergeSort(vector<int>& nums,int left,int right)
    {
        if(left<right)
        {
            int mid=left+(right-left)/2;
            mergeSort(nums,left,mid);
            mergeSort(nums,mid+1,right);
            merge(nums,left,mid,right);
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        mergeSort(nums,0,nums.size()-1);
        return nums;
    }
};

堆排序
class Solution {
public:
    void downadjust(vector<int>& nums,int root,int size)
    {
        int l=root*2+1;
        int r=root*2+2;
        int maxid=root;
        if(l<=size&&nums[l]>nums[maxid])maxid=l;
        if(r<=size&&nums[r]>nums[maxid])maxid=r;
        if(maxid!=root)
        {
            swap(nums[root],nums[maxid]);
            downadjust(nums,maxid,size);
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        for(int i=nums.size()/2;i>=0;i--)
        {
            downadjust(nums,i,nums.size()-1);
        }
        for(int i=nums.size()-1;i>0;i--)
        {
            swap(nums[i],nums[0]);
            downadjust(nums,0,i-1);
        }
        return nums;
    }
};
